plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.github.node-gradle.node' version '2.2.4'
}

group = 'com.buckwheat'
version = '0.0.1'
sourceCompatibility = '11'

jar {
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

node {
	download = true
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// DB
	implementation group: 'org.hibernate', name: 'hibernate-core', ext: 'pom'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// ETC
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.apache.commons:commons-lang3'

	// redis
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'

	// Querydsl
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

clean {
	delete file('src/main/generated')
}

def frontDir = "$projectDir/front-end"
def queryDslDir = 'src/main/generated'

clean {
	delete file(queryDslDir)
}

tasks.withType(JavaCompile){
	options.generatedSourceOutputDirectory = file(queryDslDir)
}

sourceSets {
	main {
		resources {
			srcDirs = ["$frontDir/build", "$projectDir/src/main/resources"]
		}
	}
}


processResources {
	dependsOn "copyWebApp"
}

task copyWebApp(type: Copy) {
	from "$frontDir/build"
	into "$projectDir/src/main/resources/static"
	println("copyWebApp")
}